name: Docker Build and Publish

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  STAGING_HOST: ${{ secrets.STAGING_HOST }}
  STAGING_SSH_KEY: ${{ secrets.STAGING_SSH_KEY }}
  STAGING_USER: ${{ secrets.STAGING_USER }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=sha,format=long
            type=raw,value=dev,enable=${{ github.ref == 'refs/heads/master' }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy-staging:
    needs: build-and-push
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    environment: staging
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          known_hosts: ${{ secrets.SSH_KNOWN_HOSTS }}

      - name: Deploy to staging
        env:
          REGISTRY: ${{ env.REGISTRY }}
          IMAGE_NAME: ${{ env.IMAGE_NAME }}
          TAG: sha-${{ github.sha }}
          DEPLOY_PATH: ${{ secrets.DEPLOY_PATH }}
          HOST: ${{ secrets.HOST }}
          USER: ${{ secrets.USER }}

        run: |
          # Copy docker-compose and env files
          scp docker-compose.prod.yml $USER@$HOST:$DEPLOY_PATH/docker-compose.yml
          
          # Create .env file
          echo "REGISTRY=$REGISTRY" >> .env
          echo "IMAGE_NAME=$IMAGE_NAME" >> .env
          echo "TAG=$TAG" >> .env
          echo "HOST=tutormaster.dk" >> .env
          echo "VITE_API_URL=https://api.tutormaster.dk" >> .env
          echo "VITE_AUTH_COOKIE_NAME=auth_token" >> .env
          echo "VITE_AUTH_COOKIE_DOMAIN=tutormaster.dk" >> .env
          echo "VITE_ENABLE_REGISTRATION=true" >> .env
          echo "VITE_ENABLE_SOCIAL_LOGIN=false" >> .env
          echo "VITE_ENABLE_PASSWORD_RESET=true" >> .env
          echo "VITE_ENABLE_INVITE_CODE=true" >> .env
          echo "VITE_APP_NAME=Tutor Master" >> .env
          echo "VITE_SUPPORT_EMAIL=support@tutormaster.dk" >> .env
          echo "VITE_MAX_LOGIN_ATTEMPTS=5" >> .env
          echo "VITE_LOGIN_TIMEOUT_MINUTES=15" >> .env
          
          scp .env $USER@$HOST:$DEPLOY_PATH/.env
          
          # Deploy using docker-compose
          ssh $USER@$HOST "cd $DEPLOY_PATH && \
            docker-compose pull && \
            docker-compose down --remove-orphans && \
            docker-compose up -d"


